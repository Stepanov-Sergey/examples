'''
–°–∫–ø—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∫–æ–ª—å–∫–æ —Å–∏–º–≤–æ–ª–æ–≤ –∞–ª—Ñ–∞–≤–∏—Ç–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è.
–ü–∞–Ω–≥—Ä–∞–º–º—ã - –æ—Å–º—ã—Å–ª–µ–Ω–Ω—ã–µ —Ñ—Ä–∞–∑—ã-–ø–∞–Ω–≥—Ä–∞–º–º—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –≤—Å–µ –±—É–∫–≤—ã –∞–ª—Ñ–∞–≤–∏—Ç–∞ –≤—Å—Ç—Ä–µ—á–∞—é—Ç—Å—è —Ä–æ–≤–Ω–æ –æ–¥–∏–Ω —Ä–∞–∑. 
–í –Ω–∞—à–µ–º —Å–ª—É—á–∞–µ, –º—ã –∏—â–µ–º –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º —Ñ–∞–π–ª–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è, –≤ –∫–æ—Ç–æ—Ä—ã—Ö –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±—É–∫–≤ –∞–ª—Ñ–∞–≤–∏—Ç–∞.
–î–ª—è —Ä–∞–±–æ—Ç—ã —Ç—Ä–µ–±—É—é—Ç—Å—è –º–æ–¥–µ–ª–∏ —Ä—É—Å—Å–∫–æ–≥–æ —è–∑—ã–∫–∞: https://spacy.io/models/ru
–ü—Ä–∏–º–µ—Ä —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –º–æ–¥—É–ª—è: python -m spacy download ru_core_news_sm
'''
import os
import spacy
from spacy.language import Language
import pdb
import string


nlp = spacy.load("ru_core_news_lg")


@Language.component("custom_sentence_boundary")
def set_custom_sentence_boundary(doc):
    for token in doc[:-1]:
        if token.text == '\n':
            doc[token.i + 1].is_sent_start = True
    return doc


nlp.add_pipe("custom_sentence_boundary", before="parser")


def is_pangram(sentence):
    alphabet = set("–π—Ü—É–∫–µ–Ω–≥—à—â–∑—Ö—ä—Ñ—ã–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç—å–±—é–µÃà")
    sentence = ''.join(filter(str.isalpha, sentence.lower()))
    sentence = sentence.translate(str.maketrans("", "", string.punctuation))
    return set(sentence) == alphabet


def count_alphabet_chars(sentence):
    chars = set(filter(str.isalpha, sentence.lower()))
    return len(chars)


filename = input("–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞: ")

if not os.path.exists(filename):
    print(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
    exit()

print(f"–§–∞–π–ª {filename} –Ω–∞–π–¥–µ–Ω")

with open(filename, "r", encoding="utf-8") as file:
    text = file.read()

doc = nlp(text)

pangrams = []

for sent in doc.sents:
    sentence = sent.text.strip()
    if len(sentence) < 30:
        continue
    if is_pangram(sentence):
        num_chars = count_alphabet_chars(sentence)
        print(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: '{sentence}'")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∞–ª—Ñ–∞–≤–∏—Ç–∞: {num_chars}")
        print("üéâ –≠—Ç–æ –ø–∞–Ω–≥—Ä–∞–º–º–∞! üéâ\n")
        pangrams.append(sentence)
    else:
        num_chars = count_alphabet_chars(sentence)
        print(f"–ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ: '{sentence}'")
        print(f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Å–∏–º–≤–æ–ª–æ–≤ –∞–ª—Ñ–∞–≤–∏—Ç–∞: {num_chars}")
        print("üëé –≠—Ç–æ –Ω–µ –ø–∞–Ω–≥—Ä–∞–º–º–∞. üëé\n")

print("–ù–∞–π–¥–µ–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ –ø–∞–Ω–≥—Ä–∞–º–º—ã:")
for pangram in pangrams:
    print(pangram)
